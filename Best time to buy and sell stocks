class Solution {
    int solve(int index,int tranNo,int k,int n,vector<int> &prices,vector<vector<int>> &dp){
        if(index==n || tranNo==k*2){
            return 0;
        }
        if(dp[index][tranNo]!=-1){
            return dp[index][tranNo];
        }
        int profit=0;
        if(tranNo%2==0){
            int pick=-prices[index]+solve(index+1,tranNo+1,k,n,prices,dp);
            int notPick=0+solve(index+1,tranNo,k,n,prices,dp);
            profit=max(pick,notPick);
        }
        else{
            int pick=prices[index]+solve(index+1,tranNo+1,k,n,prices,dp);
            int notPick=0+solve(index+1,tranNo,k,n,prices,dp);
            profit=max(pick,notPick);
        }
        return dp[index][tranNo]=profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2*k,-1));
        return solve(0,0,k,n,prices,dp);
    }
};
