class Solution {
    int solve(int index,int tranNo,int k,int n,vector<int> &prices,vector<vector<int>> &dp){
        if(index==n || tranNo==k*2){
            return 0;
        }
        if(dp[index][tranNo]!=-1){
            return dp[index][tranNo];
        }
        int profit=0;
        if(tranNo%2==0){
            int pick=-prices[index]+solve(index+1,tranNo+1,k,n,prices,dp);
            int notPick=0+solve(index+1,tranNo,k,n,prices,dp);
            profit=max(pick,notPick);
        }
        else{
            int pick=prices[index]+solve(index+1,tranNo+1,k,n,prices,dp);
            int notPick=0+solve(index+1,tranNo,k,n,prices,dp);
            profit=max(pick,notPick);
        }
        return dp[index][tranNo]=profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2*k,-1));
        return solve(0,0,k,n,prices,dp);
    }
};



// Also space optimization approach
// Buy and Sell Stock Pattern
// Approach - 3 Space Optimized


class Solution {
    public int maxProfit(int k, int[] prices) {
        
        int n = prices.length;
        int [][]prev = new int[2][k+1];
        int [][]cur = new int[2][k+1];
        int profit=0;

        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<=1;buy++){
                for(int transaction =1;transaction<=k;transaction++){

                    if(buy==0){
                        profit = Math.max(0+prev[0][transaction],-prices[i]+prev[1][transaction]);
                    }
                    if(buy == 1){
                        profit = Math.max(0+prev[1][transaction],prices[i]+prev[0][transaction-1]);
                    }
                    cur[buy][transaction]=profit;
                }
                prev = (int [][])(cur.clone());
            }
        }

        return prev[0][k];
    }
    
}


